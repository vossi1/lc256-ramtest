
; ******** Source: test.b
     1                          ; LC256 Ramtest - Testcode KB0
     2                          ; for ACME assembling by Vossi 11/2024, last update 11/2024
     3                          ; v1.0 initial
     4                          ; v1.1 added pcb v.1.0 128K-version in test.b
     5                          ;   AWARE: NOTHING CONNECTED TO PORT B 4-7 ALLOWED!
     6                          !cpu 65c02	; 6502, 6510, 65c02, 65816
     7                          !ct scr		; Standard text/char conversion table -> pet = petscii
     8                          ; * switches
     9                          PCBV10	= 0	; special pcb v.1.0 128K-version (2x 2bit MMU)
    10                          !to "test.bin", plain

; ******** Source: defines.b
     1                          ; LC256 Ramtest Defines
     2                          ; for ACME assembling by Vossi 11/2024, last update 11/2024
     3                          ; v1.0 initial
     4                          ; v1.1 added pcb v.1.0 128K-version in test.b
     5                          ; switches
     6                          CLOCK = 4		; CPU clock in MHz for VDP waits
     7                          ; vdp
     8                          PAL = 1			; PAL=1, NTSC=0		selects V9938/58 PAL RGB-output, NTSC has a higher picture
     9                          ; VDP speed parameter - don't change!
    10                          WAIT12 = 1 ; 2		; us 1. - 2. byte VDP
    11                          WAIT23 = 2 ; 5		; us 2. - 3. byte VDP
    12                          WAITVRAM1 = 3		; us vram 1.access
    13                          WAITVRAM = 6		; us vram loop (text mode 1+2: 6, mode 6+7: 5)
    14                          ; ***************************************** CONSTANTS *********************************************
    15                          FILL		= $00		; fills free memory areas with $00
    16                          V_NULL		= $ff		; VDP string End
    17                          ; colors
    18                          BLUE		= 6
    19                          WHITE		= 1
    20                          ; VDP defines
    21                          VDPREG1         = $10           ; VDP reg 1 value (mode bits M1+M2, screen disabled)
    22                          VDPREG9         = $00 | PAL*2   ; VDP reg 9 value ($00 = NTSC, $02 = PAL / 192 lines)
    23                          VDPREG18        = $0d           ; VDP reg 18 value (V/H screen adjust, $0d = Sony PVM 9")
    24                          FONTPAGES	= $08		; fontdata size in pages
    25                          ; colors
    26                          COLOR		= WHITE
    27                          BGRCOLOR	= BLUE
    28                          ; screen values
    29                          COLS		= 40		; screen columns
    30                          ROWS		= 24		; used lines
    31                          ; ***************************************** ADDRESSES *********************************************
    32                          ; I/O addresses
    33                          VDPWriteAdr	= $dc00		; Port#0 RamWrite, #1 Control, #2 Palette, #3 Indirect
    34                          VDPReadAdr	= $dc80		; Port#0 RamRead, #1 Status
    35                          ; VDP ports
    36                          !addr	VDPRamWrite	= VDPWriteAdr
    37                          !addr	VDPControl	= VDPWriteAdr+1
    38                          !addr	VDPPalette	= VDPWriteAdr+2
    39                          !addr	VDPIndirect	= VDPWriteAdr+3
    40                          !addr	VDPRamRead	= VDPReadAdr
    41                          !addr	VDPStatus	= VDPReadAdr+1
    42                          PatternTable		= $0800		; font
    43                          Screen			= $0000
    44                          ; 6522 VIA2 - MMU, IEC, USB RXF/TXE, Restore
    45                          	prb	= $0		; Port reg b
    46                          	ddrb	= $2		; Direction reg b
    47                          	pcr	= $c		; peripheral control register
    48                          !addr	via2	= $de40
    49                          !addr	mmu	= via2+prb	; VIA2 port B MMU register
    50                          ; ***************************************** ZERO PAGE *********************************************
    51                          ; Variables
    52                          *=$0000
    53                          !addr	result_pointer			; pointer to result screen position
    54                          !addr	source_pointer	*=*+2		; pointer for code copy 
    55                          !addr	temp		*=*+1		; temp
    56                          !addr	counter		*=*+1		; counter
    57                          !addr	pointer		*=*+2		; pointer
    58                          !addr	TESTCODE	=*		; start of testcode

; ******** Source: test.b

; ******** Source: macros.b
     1                          ; LC256 Ramtest Macros
     2                          ; for ACME assembling by Vossi 11/2024, last update 11/2024
     3                          ; v1.0 initial
     4                          ; ******************************************* MACROS **********************************************
     5                          !macro inc16 .a{		; *** increase 16bit
     6                          	inc .a
     7                          	bne .j
     8                          	inc .a+1
     9                          .j}
    10                          !macro st16i .a, .v{		; *** store 16bit immediate to address
    11                          	lda # <.v
    12                          	sta .a
    13                          	lda # >.v
    14                          	sta .a+1
    15                          }
    16                          ; VDP macros
    17                          !macro VdpWait .u, .c{		; *** us wait - cycles already present - for VDP access
    18                          	!set .t = (.u*10-(.c*10/CLOCK))*CLOCK/20
    19                          	!do while .t > 0{
    20                          		nop			; each nop needs 2 cycles
    21                          		!set .t = .t -1}
    22                          }
    23                          !macro VdpSetReg .r{		; *** set VDP Register
    24                          	sta VDPControl			; first writes data in A to control port #1
    25                          	lda #.r | $80			; writes register no. with bit#7 = 1 to Port #1
    26                          	+VdpWait WAIT12,5-1
    27                          	sta VDPControl
    28                          }
    29                          !macro VdpWriteAddress{		; *** set VDP write vram address-pointer to AAXX
    30                          	stx VDPControl
    31                          	ora #$40			; bit#6 = 1 write
    32                          	+VdpWait WAIT12,5-1
    33                          	sta VDPControl

; ******** Source: test.b
    13                          ; ***************************************** TEST CODE *********************************************
    14                          !if PCBV10 = 1{
    15                          	LASTBANK0 = $03			; pcb v.1.0 2x 2bit MMU
    16                          	LASTBANK1 = $0c
    17                          	STEPBANK1 = $04
    18                          } else{
    19                          	LASTBANK0 = $0f			; > pcb v.1.1 2x 4bit MMU
    20                          	LASTBANK1 = $f0
    21                          	STEPBANK1 = $10
    22                          }
    23                          !initmem FILL
    24                          !zone testcode
    25                          *= TESTCODE
    26  0006 a2fe               	ldx #$fe			; reset stack
    27  0008 9a                 	txs
    28                          !if PCBV10 = 1{
    29                          	inx
    30                          	stx via2+ddrb			; pcb v.1.0 complete port b output  
    31                          	inx
    32                          	stx mmu				; clear via2 port b
    33                          }
    34                          
    35  0009 a2a9               Test:	ldx #<(Screen+4*COLS+9)		; reset to first result screen position
    36  000b 8600               	stx result_pointer 
    37  000d a200               	ldx #>(Screen+4*COLS+9)
    38  000f 8601               	stx result_pointer+1
    39                          
    40  0011 a900               tstram0:lda #0
    41  0013 8502               	sta temp			; clear test flag (0=ok)
    42                          ; TEST $00, $ff
    43  0015 a9008504a9048505   	+st16i pointer, $0400		; ramtest start
    44  001d a000               	ldy #0
    45  001f a900               r0tst00:lda #$00			; test byte $00
    46  0021 9104               	sta (pointer),y
    47  0023 d104               	cmp (pointer),y
    48  0025 f004               	beq r0tstff			; ok
    49  0027 a980               	lda #$80
    50  0029 8502               	sta temp			; bad flag
    51  002b a9ff               r0tstff:lda #$ff			; test byte $ff
    52  002d 9104               	sta (pointer),y
    53  002f d104               	cmp (pointer),y
    54  0031 f004               	beq r0t00nx			; ok
    55  0033 a980               	lda #$80
    56  0035 8502               	sta temp			; bad flag
    57  0037 c8                 r0t00nx:iny
    58  0038 d0e5               	bne r0tst00			; next byte
    59  003a e605               	inc pointer+1			; inc page
    60  003c a505               	lda pointer+1
    61  003e c980               	cmp #$80			; finished RAM0?
    62  0040 d0dd               	bne r0tst00			; no.. next page
    63                          ; TEST $5a, $a5
    64  0042 a9008504a9048505   	+st16i pointer, $0400		; ramtest start
    65                          	; .y already 0
    66  004a a95a               r0tst5a:lda #$5a			; test byte $5a
    67  004c 9104               	sta (pointer),y
    68  004e d104               	cmp (pointer),y
    69  0050 f004               	beq r0tsta5			; ok
    70  0052 a980               	lda #$80
    71  0054 8502               	sta temp			; bad flag
    72  0056 a9a5               r0tsta5:lda #$a5			; test byte $a5
    73  0058 9104               	sta (pointer),y
    74  005a d104               	cmp (pointer),y
    75  005c f004               	beq r0t5anx			; ok
    76  005e a980               	lda #$80
    77  0060 8502               	sta temp			; bad flag
    78  0062 c8                 r0t5anx:iny
    79  0063 d0e5               	bne r0tst5a			; next byte
    80  0065 e605               	inc pointer+1			; inc page
    81  0067 a505               	lda pointer+1
    82  0069 c980               	cmp #$80			; finished RAM0?
    83  006b d0dd               	bne r0tst5a			; no.. next page
    84                          ; TEST $aa, second byte $55
    85  006d a9008504a9048505   	+st16i pointer, $0400		; ramtest start
    86                          	; .y already 0
    87  0075 a9aa               r0tstaa:lda #$aa			; test 1.byte $aa
    88  0077 9104               	sta (pointer),y
    89  0079 c8                 	iny
    90  007a a955               	lda #$55			; test 2.byte $55
    91  007c 9104               	sta (pointer),y
    92  007e 88                 	dey
    93  007f b104               	lda (pointer),y
    94  0081 c9aa               	cmp #$aa
    95  0083 f004               	beq r0tst55			; ok
    96  0085 a980               	lda #$80
    97  0087 8502               	sta temp			; bad flag
    98  0089 c8                 r0tst55:iny
    99  008a b104               	lda (pointer),y
   100  008c c955               	cmp #$55
   101  008e f004               	beq r0taanx			; ok
   102  0090 a980               	lda #$80
   103  0092 8502               	sta temp			; bad flag
   104  0094 c8                 r0taanx:iny
   105  0095 d0de               	bne r0tstaa			; next byte
   106  0097 e605               	inc pointer+1			; inc page
   107  0099 a505               	lda pointer+1
   108  009b c980               	cmp #$80			; finished RAM0?
   109  009d d0d6               	bne r0tstaa			; no.. next page
   110                          ; TEST address lowbyte
   111  009f a9008504a9048505   	+st16i pointer, $0400		; ramtest start
   112                          	; .y already 0
   113  00a7 98                 r0tstlo:tya				; store address lowbyte
   114  00a8 9104               	sta (pointer),y
   115  00aa c8                 	iny
   116  00ab d0fa               	bne r0tstlo			; next byte
   117  00ad e605               	inc pointer+1			; inc page
   118  00af a505               	lda pointer+1
   119  00b1 c980               	cmp #$80			; finished RAM0?
   120  00b3 d0f2               	bne r0tstlo			; no.. next page
   121  00b5 a9008504a9048505   	+st16i pointer, $0400		; ramtest start
   122                          	; .y already 0
   123  00bd 98                 r0chklo:tya				; check address lowbyte
   124  00be d104               	cmp (pointer),y
   125  00c0 f004               	beq r0tlonx			; ok
   126  00c2 a980               	lda #$80
   127  00c4 8502               	sta temp			; bad flag
   128  00c6 c8                 r0tlonx:iny
   129  00c7 d0f4               	bne r0chklo			; next byte
   130  00c9 e605               	inc pointer+1			; inc page
   131  00cb a505               	lda pointer+1
   132  00cd c980               	cmp #$80			; finished RAM0?
   133  00cf d0ec               	bne r0chklo			; no.. next page
   134                          ; TEST address highbyte
   135  00d1 a9008504a9048505   	+st16i pointer, $0400		; ramtest start
   136                          	; .y already 0, address highbyte already in .a
   137  00d9 9104               r0tsthi:sta (pointer),y
   138  00db c8                 	iny
   139  00dc d0fb               	bne r0tsthi			; next byte
   140  00de e605               	inc pointer+1			; inc page
   141  00e0 a505               	lda pointer+1
   142  00e2 c980               	cmp #$80			; finished RAM0?
   143  00e4 d0f3               	bne r0tsthi			; no.. next page
   144  00e6 a9008504a9048505   	+st16i pointer, $0400		; ramtest start
   145                          	; .y already 0, address highbyte already in .a
   146  00ee d104               r0chkhi:cmp (pointer),y
   147  00f0 f004               	beq r0thinx			; ok
   148  00f2 a980               	lda #$80
   149  00f4 8502               	sta temp			; bad flag
   150  00f6 c8                 r0thinx:iny
   151  00f7 d0f5               	bne r0chkhi			; next byte
   152  00f9 e605               	inc pointer+1			; inc page
   153  00fb a505               	lda pointer+1
   154  00fd c980               	cmp #$80			; finished RAM0?
   155  00ff d0ed               	bne r0chkhi			; no.. next page
   156                          ; print result
   157  0101 2402               	bit temp			; bank ok?
   158  0103 1006               	bpl ram0ok			; yes.. print ok
   159  0105 20ab01             	jsr TestBAD
   160  0108 4c0e01             	jmp r0nxbnk			; next bank
   161                          
   162  010b 209301             ram0ok:	jsr TestOK
   163                          ; next bank
   164  010e ae40de             r0nxbnk:ldx mmu
   165  0111 e00f               	cpx #LASTBANK0			; last bank?
   166  0113 f007               	beq r0bnkst
   167  0115 e8                 	inx				; inc bank
   168  0116 8e40de             	stx mmu
   169  0119 4c1100             	jmp tstram0			; test next bank
   170                          ; store bank no
   171                          	; last bank in .a
   172  011c a2a9               r0bnkst:ldx #<(Screen+4*COLS+9)		; reset to first result screen position
   173  011e 8600               	stx result_pointer 
   174  0120 a200               	ldx #>(Screen+4*COLS+9)
   175  0122 8601               	stx result_pointer+1
   176                          
   177  0124 a200               	ldx #$00			; RAM0 start $0400
   178  0126 8604               	stx pointer
   179  0128 a204               r0bnklp:ldx #$04
   180  012a 8605               	stx pointer+1
   181  012c a000               	ldy #0
   182  012e 9104               r0bstlp:sta (pointer),y
   183  0130 c8                 	iny
   184  0131 d0fb               	bne r0bstlp			; next byte
   185  0133 e605               	inc pointer+1			; inc page
   186  0135 a605               	ldx pointer+1
   187  0137 e080               	cpx #$80			; finished RAM0?
   188  0139 d0f3               	bne r0bstlp			; no.. next page
   189                          ; decrease bank
   190  013b c900               	cmp #$00			; first bank reached?
   191  013d f009               	beq r0bchk			; yes.. check banks
   192  013f 38                 	sec
   193  0140 e901               	sbc #1				; dec bank
   194  0142 8d40de             	sta mmu
   195  0145 4c2801             	jmp r0bnklp
   196                          ; check bank no
   197                          	; .a already 0
   198  0148 8504               r0bchk:	sta pointer			; RAM0 start $0400
   199                          	; .a = start bank 0
   200  014a a204               r0chklp:ldx #$04
   201  014c 8605               	stx pointer+1
   202  014e a000               	ldy #0
   203  0150 8402               	sty temp			; clear test flag (0=ok)
   204  0152 d104               r0bchlp:cmp (pointer),y
   205  0154 f004               	beq r0chknx			; ok
   206  0156 a280               	ldx #$80
   207  0158 8602               	stx temp			; bad flag
   208  015a c8                 r0chknx:iny
   209  015b d0f5               	bne r0bchlp			; next byte
   210  015d e605               	inc pointer+1			; inc page
   211  015f a605               	ldx pointer+1
   212  0161 e080               	cpx #$80			; finished RAM0?
   213  0163 d0ed               	bne r0bchlp			; no.. next page
   214                          
   215  0165 2402               	bit temp			; bank ok?
   216  0167 1008               	bpl r0chkok			; yes.. skip line
   217  0169 a8                 	tay				; remember bank
   218  016a 20ab01             	jsr TestBAD
   219  016d 98                 	tya
   220  016e 4c7601             	jmp r0chnxb			; skip
   221  0171 a8                 r0chkok:tay				; remember bank
   222  0172 20c403             	jsr SetResultPointer		; skip line
   223  0175 98                 	tya
   224                          ; increase bank
   225  0176 c90f               r0chnxb:cmp #LASTBANK0			; last bank?
   226  0178 f009               	beq rstmmu
   227  017a 18                 	clc
   228  017b 6901               	adc #1				; inc bank
   229  017d 8d40de             	sta mmu
   230  0180 4c4a01             	jmp r0chklp			; check next bank
   231                          
   232  0183 a900               rstmmu:	lda #$00
   233  0185 8d40de             	sta mmu
   234                          
   235  0188 a2bd               	ldx #<(Screen+4*COLS+29)		; reset to first result screen position
   236  018a 8600               	stx result_pointer 
   237  018c a200               	ldx #>(Screen+4*COLS+29)
   238  018e 8601               	stx result_pointer+1
   239                          
   240  0190 4c0002             	jmp tstram1			; continue with test of RAM1 above stack
   241                          ; -------------------------------------------------------------------------------------------------
   242                          ; write OK
   243  0193 20c403             TestOK:	jsr SetResultPointer
   244  0196 a94f               	lda #'O'
   245  0198 8d00dc             	sta VDPRamWrite
   246  019b eaeaeaeaeaeaeaea...	+VdpWait WAITVRAM,5-1
   247  01a5 a94b               	lda #'K'
   248  01a7 8d00dc             	sta VDPRamWrite
   249  01aa 60                 	rts
   250                          ; -------------------------------------------------------------------------------------------------
   251                          ; write BAD
   252  01ab 20c403             TestBAD:jsr SetResultPointer
   253  01ae a942               	lda #'B'
   254  01b0 8d00dc             	sta VDPRamWrite
   255  01b3 eaeaeaeaeaeaeaea...	+VdpWait WAITVRAM,5-1
   256  01bd a941               	lda #'A'
   257  01bf 8d00dc             	sta VDPRamWrite
   258  01c2 eaeaeaeaeaeaeaea...	+VdpWait WAITVRAM,5-1
   259  01cc a944               	lda #'D'
   260  01ce 8d00dc             	sta VDPRamWrite
   261  01d1 60                 	rts
   262                          ; ******************************************** STACK **********************************************
   263                          !zone stack
   264                          *= $01e0
   265                          ; only small stack used
   266                          ; ******************************************** CODE2 **********************************************
   267                          !zone code2
   268                          *= $0200
   269  0200 a900               tstram1:lda #0
   270  0202 8502               	sta temp			; clear test flag (0=ok)
   271                          ; TEST $00, $ff
   272  0204 a9008504a9808505   	+st16i pointer, $8000		; ramtest start
   273  020c a000               	ldy #0
   274  020e a900               r1tst00:lda #$00			; test byte $00
   275  0210 9104               	sta (pointer),y
   276  0212 d104               	cmp (pointer),y
   277  0214 f004               	beq r1tstff			; ok
   278  0216 a980               	lda #$80
   279  0218 8502               	sta temp			; bad flag
   280  021a a9ff               r1tstff:lda #$ff			; test byte $ff
   281  021c 9104               	sta (pointer),y
   282  021e d104               	cmp (pointer),y
   283  0220 f004               	beq r1t00nx			; ok
   284  0222 a980               	lda #$80
   285  0224 8502               	sta temp			; bad flag
   286  0226 c8                 r1t00nx:iny
   287  0227 d0e5               	bne r1tst00			; next byte
   288  0229 e605               	inc pointer+1			; inc page
   289  022b a505               	lda pointer+1
   290  022d f00a               	beq r1ini5a			; $0000 -> test finished
   291  022f c9dc               	cmp #$dc			; I/O area reached?
   292  0231 d0db               	bne r1tst00			; no.. next page
   293  0233 a9e0               	lda #$e0			; skip I/O
   294  0235 8505               	sta pointer+1
   295  0237 d0d5               	bne r1tst00			; always: next page behind I/O
   296                          ; TEST $5a, $a5
   297  0239 a9008504a9808505   r1ini5a:+st16i pointer, $8000		; ramtest start
   298                          	; .y already 0
   299  0241 a95a               r1tst5a:lda #$5a			; test byte $5a
   300  0243 9104               	sta (pointer),y
   301  0245 d104               	cmp (pointer),y
   302  0247 f004               	beq r1tsta5			; ok
   303  0249 a980               	lda #$80
   304  024b 8502               	sta temp			; bad flag
   305  024d a9a5               r1tsta5:lda #$a5			; test byte $a5
   306  024f 9104               	sta (pointer),y
   307  0251 d104               	cmp (pointer),y
   308  0253 f004               	beq r1t5anx			; ok
   309  0255 a980               	lda #$80
   310  0257 8502               	sta temp			; bad flag
   311  0259 c8                 r1t5anx:iny
   312  025a d0e5               	bne r1tst5a			; next byte
   313  025c e605               	inc pointer+1			; inc page
   314  025e a505               	lda pointer+1
   315  0260 f00a               	beq r1iniaa			; $0000 -> test finished
   316  0262 c9dc               	cmp #$dc			; I/O area reached?
   317  0264 d0db               	bne r1tst5a			; no.. next page
   318  0266 a9e0               	lda #$e0			; skip I/O
   319  0268 8505               	sta pointer+1
   320  026a d0d5               	bne r1tst5a			; always: next page behind I/O
   321                          ; TEST $aa, second byte $55
   322  026c a9008504a9808505   r1iniaa:+st16i pointer, $8000		; ramtest start
   323                          	; .y already 0
   324  0274 a9aa               r1tstaa:lda #$aa			; test 1.byte $aa
   325  0276 9104               	sta (pointer),y
   326  0278 c8                 	iny
   327  0279 a955               	lda #$55			; test 2.byte $55
   328  027b 9104               	sta (pointer),y
   329  027d 88                 	dey
   330  027e b104               	lda (pointer),y
   331  0280 c9aa               	cmp #$aa
   332  0282 f004               	beq r1tst55			; ok
   333  0284 a980               	lda #$80
   334  0286 8502               	sta temp			; bad flag
   335  0288 c8                 r1tst55:iny
   336  0289 b104               	lda (pointer),y
   337  028b c955               	cmp #$55
   338  028d f004               	beq r1taanx			; ok
   339  028f a980               	lda #$80
   340  0291 8502               	sta temp			; bad flag
   341  0293 c8                 r1taanx:iny
   342  0294 d0de               	bne r1tstaa			; next byte
   343  0296 e605               	inc pointer+1			; inc page
   344  0298 a505               	lda pointer+1
   345  029a f00a               	beq r1inilo			; $0000 -> test finished
   346  029c c9dc               	cmp #$dc			; I/O area reached?
   347  029e d0d4               	bne r1tstaa			; no.. next page
   348  02a0 a9e0               	lda #$e0			; skip I/O
   349  02a2 8505               	sta pointer+1
   350  02a4 d0ce               	bne r1tstaa			; always: next page behind I/O
   351                          ; TEST address lowbyte
   352  02a6 a9008504a9808505   r1inilo:+st16i pointer, $8000		; ramtest start
   353                          	; .y already 0
   354  02ae 98                 r1tstlo:tya				; store address lowbyte
   355  02af 9104               	sta (pointer),y
   356  02b1 c8                 	iny
   357  02b2 d0fa               	bne r1tstlo			; next byte
   358  02b4 e605               	inc pointer+1			; inc page
   359  02b6 a505               	lda pointer+1
   360  02b8 f00a               	beq r1inilc			; $0000 -> test finished
   361  02ba c9dc               	cmp #$dc			; I/O area reached?
   362  02bc d0f0               	bne r1tstlo			; no.. next page
   363  02be a9e0               	lda #$e0			; skip I/O
   364  02c0 8505               	sta pointer+1
   365  02c2 d0ea               	bne r1tstlo			; always: next page behind I/O
   366  02c4 a9008504a9808505   r1inilc	+st16i pointer, $8000		; ramtest start
   367                          	; .y already 0
   368  02cc 98                 r1chklo:tya				; check address lowbyte
   369  02cd d104               	cmp (pointer),y
   370  02cf f004               	beq r1tlonx			; ok
   371  02d1 a980               	lda #$80
   372  02d3 8502               	sta temp			; bad flag
   373  02d5 c8                 r1tlonx:iny
   374  02d6 d0f4               	bne r1chklo			; next byte
   375  02d8 e605               	inc pointer+1			; inc page
   376  02da a505               	lda pointer+1
   377  02dc f00a               	beq r1inihi			; $0000 -> test finished
   378  02de c9dc               	cmp #$dc			; I/O area reached?
   379  02e0 d0ea               	bne r1chklo			; no.. next page
   380  02e2 a9e0               	lda #$e0			; skip I/O
   381  02e4 8505               	sta pointer+1
   382  02e6 d0e4               	bne r1chklo			; always: next page behind I/O
   383                          ; TEST address highbyte
   384  02e8 a9008504a9808505   r1inihi:+st16i pointer, $8000		; ramtest start
   385                          	; .y already 0, address highbyte already in .a
   386  02f0 9104               r1tsthi:sta (pointer),y
   387  02f2 c8                 	iny
   388  02f3 d0fb               	bne r1tsthi			; next byte
   389  02f5 e605               	inc pointer+1			; inc page
   390  02f7 a505               	lda pointer+1
   391  02f9 f00a               	beq r1inihc			; $0000 -> test finished
   392  02fb c9dc               	cmp #$dc			; I/O area reached?
   393  02fd d0f1               	bne r1tsthi			; no.. next page
   394  02ff a9e0               	lda #$e0			; skip I/O
   395  0301 8505               	sta pointer+1
   396  0303 d0eb               	bne r1tsthi			; always: next page behind I/O
   397  0305 a9008504a9808505   r1inihc:+st16i pointer, $8000		; ramtest start
   398                          	; .y already 0, address highbyte already in .a
   399  030d d104               r1chkhi:cmp (pointer),y
   400  030f f004               	beq r1thinx			; ok
   401  0311 a980               	lda #$80
   402  0313 8502               	sta temp			; bad flag
   403  0315 c8                 r1thinx:iny
   404  0316 d0f5               	bne r1chkhi			; next byte
   405  0318 e605               	inc pointer+1			; inc page
   406  031a a505               	lda pointer+1
   407  031c f00a               	beq r1reslt			; $0000 -> test finished
   408  031e c9dc               	cmp #$dc			; I/O area reached?
   409  0320 d0eb               	bne r1chkhi			; no.. next page
   410  0322 a9e0               	lda #$e0			; skip I/O
   411  0324 8505               	sta pointer+1
   412  0326 d0e5               	bne r1chkhi			; always: next page behind I/O
   413                          ; print result
   414  0328 2402               r1reslt:bit temp			; bank ok?
   415  032a 1006               	bpl ram1ok			; yes.. print ok
   416  032c 20ab01             	jsr TestBAD
   417  032f 4c3503             	jmp r1nxbnk			; next bank
   418                          
   419  0332 209301             ram1ok:	jsr TestOK
   420                          ; next bank
   421  0335 ad40de             r1nxbnk:lda mmu
   422  0338 c9f0               	cmp #LASTBANK1			; last bank?
   423  033a f009               	beq r1bnkst
   424  033c 18                 	clc
   425  033d 6910               	adc #STEPBANK1			; inc bank
   426  033f 8d40de             	sta mmu
   427  0342 4c0002             	jmp tstram1			; test next bank
   428                          ; store bank no
   429                          	; last bank in .a
   430  0345 a2bd               r1bnkst:ldx #<(Screen+4*COLS+29)		; reset to first result screen position
   431  0347 8600               	stx result_pointer 
   432  0349 a200               	ldx #>(Screen+4*COLS+29)
   433  034b 8601               	stx result_pointer+1
   434                          
   435  034d a200               	ldx #$00			; RAM1 start $8000
   436  034f 8604               	stx pointer
   437  0351 a280               r1bnklp:ldx #$80
   438  0353 8605               	stx pointer+1
   439  0355 a000               	ldy #0
   440  0357 9104               r1bstlp:sta (pointer),y
   441  0359 c8                 	iny
   442  035a d0fb               	bne r1bstlp			; next byte
   443  035c e605               	inc pointer+1			; inc page
   444  035e a605               	ldx pointer+1
   445  0360 f00a               	beq r1bstdc			; $0000 -> test finished
   446  0362 e0dc               	cpx #$dc			; I/O area reached?
   447  0364 d0f1               	bne r1bstlp			; no.. next page
   448  0366 a2e0               	ldx #$e0			; skip I/O
   449  0368 8605               	stx pointer+1
   450  036a d0eb               	bne r1bstlp			; always: next page behind I/O
   451                          ; decrease bank
   452  036c c900               r1bstdc:cmp #$00			; first bank reached?
   453  036e f009               	beq r1bchk			; yes.. check banks
   454  0370 38                 	sec
   455  0371 e910               	sbc #$10			; dec bank
   456  0373 8d40de             	sta mmu
   457  0376 4c5103             	jmp r1bnklp
   458                          ; check bank no
   459                          	; .a already 0
   460  0379 8504               r1bchk:	sta pointer			; RAM1 start $8000
   461                          	; .a = start bank 0
   462  037b a280               r1chklp:ldx #$80
   463  037d 8605               	stx pointer+1
   464  037f a000               	ldy #0
   465  0381 8402               	sty temp			; clear test flag (0=ok)
   466  0383 d104               r1bchlp:cmp (pointer),y
   467  0385 f004               	beq r1chknx			; ok
   468  0387 a280               	ldx #$80
   469  0389 8602               	stx temp			; bad flag
   470  038b c8                 r1chknx:iny
   471  038c d0f5               	bne r1bchlp			; next byte
   472  038e e605               	inc pointer+1			; inc page
   473  0390 a605               	ldx pointer+1
   474  0392 f00a               	beq r1bkres			; $0000 -> test finished
   475  0394 e0dc               	cpx #$dc			; I/O area reached?
   476  0396 d0eb               	bne r1bchlp			; no.. next page
   477  0398 a2e0               	ldx #$e0			; skip I/O
   478  039a 8605               	stx pointer+1
   479  039c d0e5               	bne r1bchlp			; always: next page behind I/O
   480                          
   481  039e 2402               r1bkres:bit temp			; bank ok?
   482  03a0 1008               	bpl r1chkok			; yes.. skip line
   483  03a2 a8                 	tay				; remember bank
   484  03a3 20ab01             	jsr TestBAD
   485  03a6 98                 	tya
   486  03a7 4caf03             	jmp r1chnxb			; skip
   487  03aa a8                 r1chkok:tay				; remember bank
   488  03ab 20c403             	jsr SetResultPointer		; skip line
   489  03ae 98                 	tya
   490                          ; increase bank
   491  03af c9f0               r1chnxb:cmp #LASTBANK1			; last bank?
   492  03b1 f009               	beq end				; end
   493  03b3 18                 	clc
   494  03b4 6910               	adc #STEPBANK1			; inc bank
   495  03b6 8d40de             	sta mmu
   496  03b9 4c7b03             	jmp r1chklp			; check next bank
   497                          
   498  03bc a900               end:	lda #$00
   499  03be 8d40de             	sta mmu
   500  03c1 4c0900             	jmp Test			; restart with RAM0
   501                          ; -------------------------------------------------------------------------------------------------
   502                          ; set and move result pointer
   503                          SetResultPointer:
   504  03c4 a600               	ldx result_pointer		; screen pointer to result
   505  03c6 a501               	lda result_pointer+1
   506  03c8 8e01dc09408d01dc   	+VdpWriteAddress
   507  03d0 8a                 	txa				; low to .a
   508  03d1 18                 	clc
   509  03d2 6928               	adc #COLS			; result pointer to next line
   510  03d4 8500               	sta result_pointer
   511  03d6 9002               	bcc setrptx
   512  03d8 e601               	inc result_pointer+1
   513                          	+VdpWait WAITVRAM1,21-1
   514  03da 60                 setrptx:rts
   515                          ; ******************************************** BASIC **********************************************
   516                          !zone basic
   517                          *= $0400
